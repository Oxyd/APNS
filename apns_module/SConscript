from sys import platform

Import(['debug', 'config', 'bits', 'toolchain', 'env'])

sources = Glob('src/*.cpp')
results = dict()

buildEnv = env.Clone()
buildEnv.VariantDir('build', 'src', duplicate=0)

apnslib = buildEnv.SharedLibrary(target='apnsmod', source=sources)
results['apnslib'] = apnslib

#
# Unit tests
#

testEnv = env.Clone()

testEnv.VariantDir('test-build', 'src', duplicate=0)
testEnv.Append(CPPPATH='src/')
testEnv.Append(LIBS=config['libs']['gtest'])

test_sources = [
  'hash_test',
  'board_test',
  'movement_test',
  'util_test'
]

tests = list()

objList = testEnv.Glob('test-build/*.cpp')

for test in test_sources:
  program = testEnv.Program(target='tests/%s' % test, source=['tests/%s.cpp' % test, objList])
  command = testEnv.Command(test, [program], program[0].abspath)
  tests.append(command)
  results[test] = command
  AlwaysBuild(command)

t = Alias('tests_', tests)  # 'tests_' because without the underscore we have a cyclic dependency tests -> tests here.
results['tests'] = t

Return('results')
