from sys import platform
from os import environ

Import(['debug', 'config', 'bits', 'toolchain'])

envArgs = dict()
envArgs['ENV'] = environ
if 'scons-tool' in config:    envArgs['tools'] = [config['scons-tool']]
if 'target-arch' in config:   envArgs['TARGET_ARCH'] = config['target-arch']

env = Environment(**envArgs)
  
env.Append(CPPPATH=[
  config['includedirs']['boost-python'],
  config['includedirs']['python']
])
env.Append(LIBPATH=[
  config['libdirs']['boost-python'],
  config['libdirs']['python']
])
env.Append(LIBS=[
  config['libs']['boost-python'],
  config['libs']['python']
])

if 'scons-tool' in config:    Tool(config['scons-tool'])(env)
if 'compiler' in config:      env.Replace(CXX=config['compiler'])
if 'defines' in config:       env.Append(CPPDEFINES=config['defines'])
if 'compile-flags' in config: env.Append(CCFLAGS=config['compile-flags'])
if 'link-flags' in config:    env.Append(LINKFLAGS=config['link-flags'])

# Process any extra configuration that needs to be done for this platform.
if 'extra' in config: config['extra'](env)

sources = Glob('src/*.cpp')
results = dict()

buildEnv = env.Clone()
buildEnv.VariantDir('build', 'src', duplicate=0)

apnslib = buildEnv.SharedLibrary(target='apnsmod', source=sources)
results['apnslib'] = apnslib

#
# Unit tests
#

testEnv = env.Clone()

testEnv.VariantDir('test-build', 'src', duplicate=0)
testEnv.Append(CPPPATH=['src/', config['includedirs']['gtest']])
testEnv.Append(LIBPATH=config['libdirs']['gtest'])
testEnv.Append(LIBS=config['libs']['gtest'])

test_sources = [
  'hash_test',
  'board_test',
  'movement_test',
  'util_test'
]

tests = list()

objList = testEnv.Glob('test-build/*.cpp')

for test in test_sources:
  program = testEnv.Program(target='tests/%s' % test, source=['tests/%s.cpp' % test, objList])
  command = testEnv.Command(test, [program], program[0].abspath)
  tests.append(command)
  results[test] = command
  AlwaysBuild(command)

t = Alias('tests_', tests)  # 'tests_' because without the underscore we have a cyclic dependency tests -> tests here.
results['tests'] = t

Return('results')
